// <auto-generated />
using System;
using ControleVeiculo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ControleVeiculo.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ControleVeiculo.Abastecimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataLancamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("KM")
                        .HasColumnType("integer");

                    b.Property<double>("Litros")
                        .HasColumnType("double precision");

                    b.Property<Guid>("MotoristaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioAlteracao")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacao")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.Property<Guid>("VeiculoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MotoristaId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Abastecimentos");
                });

            modelBuilder.Entity("ControleVeiculo.Motorista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimeiroNome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SobreNome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsuarioAlteracao")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacao")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Motoristas");
                });

            modelBuilder.Entity("ControleVeiculo.MotoristaVeiculo", b =>
                {
                    b.Property<Guid>("MotoristaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VeiculoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UsuarioAlteracao")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacao")
                        .HasColumnType("uuid");

                    b.HasKey("MotoristaId", "VeiculoId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("MotoristasVeiculos");
                });

            modelBuilder.Entity("ControleVeiculo.TurnoLancamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataLancamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("KM")
                        .HasColumnType("integer");

                    b.Property<double>("Litros")
                        .HasColumnType("double precision");

                    b.Property<Guid>("MotoristaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioAlteracao")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacao")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.Property<Guid>("VeiculoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MotoristaId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("TurnoLancamentos");
                });

            modelBuilder.Entity("ControleVeiculo.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Localidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsuarioAlteracao")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacao")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Veiculos");
                });

            modelBuilder.Entity("ControleVeiculo.Abastecimento", b =>
                {
                    b.HasOne("ControleVeiculo.Motorista", "Motorista")
                        .WithMany()
                        .HasForeignKey("MotoristaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleVeiculo.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorista");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("ControleVeiculo.MotoristaVeiculo", b =>
                {
                    b.HasOne("ControleVeiculo.Motorista", "Motorista")
                        .WithMany("MotoristaVeiculos")
                        .HasForeignKey("MotoristaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleVeiculo.Veiculo", "Veiculo")
                        .WithMany("MotoristaVeiculos")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorista");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("ControleVeiculo.TurnoLancamento", b =>
                {
                    b.HasOne("ControleVeiculo.Motorista", "Motorista")
                        .WithMany()
                        .HasForeignKey("MotoristaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleVeiculo.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorista");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("ControleVeiculo.Motorista", b =>
                {
                    b.Navigation("MotoristaVeiculos");
                });

            modelBuilder.Entity("ControleVeiculo.Veiculo", b =>
                {
                    b.Navigation("MotoristaVeiculos");
                });
#pragma warning restore 612, 618
        }
    }
}
